/* css */
/* LateNight 2.3 // Classic theme */


/******************************************************************************
************** Scheme-specific layout adjustments & colors ********************/

#Deck1, #Deck2, #Deck3,  #Deck4,
  #DeckCompact1, #DeckCompact2, #DeckCompact3, #DeckCompact4,
  #DeckMini1, #DeckMini2, #DeckMini3, #DeckMini4,
#FxUnit1, #FxUnit2, #FxUnit3, #FxUnit4,
  #FxUnitControlsExpanded, #FxUnitControlsCollapsed,
  #FxSlotsExpanded, #FxSlotsCollapsed,
#MixerContainer,
#MicDuckingContainer, #MicAuxUnit, #MicAuxAddFrame,
#Sampler, #SamplerMini,
WEffectSelector::checked, #fadeModeCombobox::checked,
#ToolBar, #WaveformsContainer,
WLibrary,
#SidebarBox,
#PreviewDeck,
#SearchLineBox,
QAbstractScrollArea::corner {
  background-color: #1e1e1e;
}

/* borders of elevated containers */
#WaveformsContainer,
#Deck1, #Deck2, #Deck3, #Deck4,
  #DeckCompact1, #DeckCompact2, #DeckCompact3, #DeckCompact4,
  #DeckMini1, #DeckMini2, #DeckMini3, #DeckMini4,
#FxUnit1, #FxUnit2, #FxUnit3, #FxUnit4,
#MixerContainer,
#MicDuckingContainer, #MicAuxUnit, #MicAuxAddFrame,
#Sampler, #SamplerMini,
WLibrary, #SidebarBox, #SearchLineBox, #PreviewDeck {
  border-top: 1px solid #333;
  border-left: 1px solid #333;
  border-bottom: 1px solid #0a0a0a;
  border-right: 1px solid #0a0a0a;
  border-radius: 2px;
}

/* borders of embedded regions like deck buttons & Master mixer */
#DeckRow_5_LoopCuesTransport,
#DeckRow_5_LoopCuesTransportCompact,
#MasterControls, #HeadphoneControls,
#FxParametersBg,
#SamplerHotcues,
WSearchLineEdit,
#OverviewBox, #OverviewBoxMini {
  border-top: 1px solid #0a0a0a;
  border-left: 1px solid #0a0a0a;
  border-bottom: 1px solid #333;
  border-right: 1px solid #333;
  border-bottom-left-radius: 1px;
  border-top-right-radius: 1px;
  background-color: #151515;
  }
#KeyText {
  border-top: 1px solid #0a0a0a;
  border-bottom: 1px solid #333;
  background-color: #151515;
  }
  /* some get a background image */
  #DeckRow_5_LoopCuesTransport,
  #DeckRow_5_LoopCuesTransportCompact,
  #MasterControls, #HeadphoneControls,
  #FxParametersBg,
  #SamplerHotcues {
    background-image: url(skin:/classic/style/background_tile.png);
  }

#FxParametersFocusBg {
  border: 1px solid #d08e00;
  background-color: rgba(0,0,0,50);
}

#OverviewBox[highlight="1"],
#OverviewBoxMini[highlight="1"] {
  background-color: #080808;
}

/* background of fillers */
#VuMeterContainerCompactDeck, #VuMeterContainerCompactMaster,
#FxRackFillerL,
#FxRackFillerR,
#SamplerExpandBox,
#MicAuxRackFiller {
  border-top: 1px solid #222;
  border-left: 1px solid #222;
  border-bottom: 1px solid #111;
  border-right: 1px solid #111;
  border-radius: 2px;
  background-color: #151515;
  }
  #FxRackFillerL {
    margin: 0px 3px 4px 3px;
  }
  #FxRackFillerR {
    margin: 0px 3px 4px 3px;
  }

#VuMasterCover {
  background-color: rgba(21, 21, 21, 150);
}

WLibrary {
  border-top-left-radius: 0px;
}
#WaveformsBottomBorder, #WaveformsRightBorder {
  background-color: #333;
}
#WaveformsBottomBorder {
  padding-top: 1px;
}
#WaveformsContainer {
  padding: 0px 0px 1px 0px;
}
#WaveformsContainer[highlight="0"] {
  padding: 0px 0px 1px 0px;
  border-width: 0px 0px 1px 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  }
  #WaveformsContainer[highlight="1"] {
    /* the right border is necessary only when the skin settings menu is visible */
    border-width: 0px 1px 1px 0px;
  }

#SeparatorV,
#SeparatorFxV {
  /* needs a background color to paint the borders */
  background-color: transparent;
  }
  #SeparatorFxV {
    image: url(skin:/classic/style/fx_separator.png) repeat center center;
    margin: 2px 0px;
  }

#SeparatorH,
#SeparatorFxH {
  /* needs a background color to paint the borders */
  background-color: transparent;
  }
  #SeparatorFxH {
    margin: 0px 2px;
  }

WLibrary,
#SearchLineBox {
  border-top: 0px;
}
#SearchLineBox {
  border-bottom-right-radius: 0px;
  border-right: 0px;
  border-top-right-radius: 0px;
  border-top-left-radius: 0px;
}
#SidebarBox {
  border-right: 0px;
  border-top-right-radius: 0px;
}

#KeyText {
  border-left: 0px;
  border-right: : 0px;
}


/************ separator lines & borders within decks, samplers etc. *********************/
#DeckRow_1_BottomBorder,
#DeckRows2345,
#DeckRows234, #TitleRow,
#DeckRow_2_3_ArtistTitleTime,
#DeckRow_5_SpacerCompact,
#DeckSettingsStars, #DeckSettingsContainerCompact,
#DeckRateSeparator,
#TitleText, #TitleTextSmall,
#PlayPositionText, #PlayPositionTextSmall,
#BpmTextSmall, #KeyTextSmall, #ArtistTextSmall, #PlayPositionTextSmall,
#PreviewPlayBox,
#SamplerTitle, #SamplerPlay, #SamplerSettings,
#SamplerGain, #SamplerVU, #SamplerPfl {
  border-style: solid;
  border-color: #0c0c0c;
}

/* see
  separator_artist_title.xml and
  separator_spinny_cover
  for visibility conditions */
#SeparatorLine {
  background-color: #0c0c0c;
}

/*********** layout margins & paddings ****************************************/
#Deck1, #Deck2, #Deck3, #Deck4,
#DeckCompact1, #DeckCompact2, #DeckCompact3, #DeckCompact4,
#DeckMini1, #DeckMini2, #DeckMini3, #DeckMini4,
#FxUnit1, #FxUnit3,
#FxUnit2, #FxUnit4,
#MicAuxRack,
#SamplerRack,
#MixerContainer {
  margin-bottom: 4px;
}

#SkinSettingsContainer {
  margin-left: 3px;
}

#Deck1, #DeckCompact1[highlight="0"], #DeckMini1,
#Deck3, #DeckCompact3[highlight="0"], #DeckMini3,
#FxUnit1, #FxUnit3 {
  margin-right: 3px;
  margin-left: 3px;
  }
  #DeckCompact1[highlight="1"],
  #DeckCompact3[highlight="1"] {
    margin-left: 3px;
    margin-right: 0px;
    border-right: 0px;
    border-top-right-radius: 0px;
    border-bottom-right-radius: 0px;
  }

#Deck2, #DeckCompact2[highlight="0"], #DeckMini2,
#Deck4, #DeckCompact4[highlight="0"], #DeckMini4,
#FxUnit2, #FxUnit4 {
  margin-right: 3px;
  margin-left: 3px;
  }
  #DeckCompact2[highlight="1"],
  #DeckCompact4[highlight="1"] {
    margin-right: 3px;
    margin-left: 0px;
    border-left: 0px;
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
  }

#Deck1, #Deck2, #Deck3, #Deck4,
#DeckCompact1, #DeckCompact2, #DeckCompact3, #DeckCompact4 {  /* */
  padding: 1px 2px 0px 1px;
}
#DeckMini1, #DeckMini2, #DeckMini3, #DeckMini4 {
  padding: 1px;
}
#DeckMini1, #DeckMini2 {
  margin-top: 3px;
}

#DeckRow_1_KeyVinylFx {
  margin-bottom: 1px;
}


#DeckRows12345,
#DeckRows2345 {
  padding: 2px 0px 3px 2px;
}
#DeckRows234 {
}

#SpinnyCoverContainerSmall{
  padding: 0px 2px 0px 0px;
  }
  #SpinnyCoverContainerBig {
    padding: 2px 2px 0px 0px;
  }
  #SpinnyCoverContainerBigCompact {
    padding: 0px 2px 0px 0px;
  }
  #SpinnyCoverContainerMiniDeck {
  }

#DeckRow_2_3_ArtistTitleTime {
  padding-left: 1px;
  margin: 0px 0px 0px 0px;
  }
  #DeckRow_2_3_ArtistTitleTime[highlight="0"] {
    border-width: 0px 0px 0px 0px;
    }
    #DeckRow_2_3_ArtistTitleTime[highlight="1"] {
      border-width: 0px 1px 0px 0px;
    }
  #ArtistRow, #TitleRow {
    padding-right: 2px;
  }

#DeckRow_4_OverviewSpinny {}

#DeckSettingsStars[highlight="0"] {
  border-width: 1px 0px 0px 0px;
  }
  #DeckSettingsStars[highlight="1"] {
    border-width: 1px 1px 0px 0px;
  }
#DeckSettingsContainerCompact {
    border-width: 0px 0px 1px 0px;
  }

#DeckRow_5_SpacerCompact { /* */
  padding-top: 2px;
  }
  #DeckRow_5_SpacerCompact[highlight="0"] {
    border-width: 0px 0px 0px 0px;
    }
    #DeckRow_5_SpacerCompact[highlight="1"] {
      border-width: 0px 1px 0px 0px;
    }

#DeckRow_5_LoopCuesTransport,
#DeckRow_5_LoopCuesTransportCompact {
  qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
  padding: 1px 1px 2px 1px;
  }
#DeckRow_5_LoopCuesTransport {
  margin: 2px 0px 0px 0px;
  }


/************** Mixer *********************************************************/
#VolumeGain2Decks {
  margin: 0px 2px;
}
#ChannelMixerKnobContainer {
  qproperty-layoutSpacing: 3;
}
#MixerDecks {
  padding: 2px 6px 2px 6px;
}

#MixerMasterHeadphone {
  margin: 3px 3px 3px 0px;
  }
  #MasterControls {
    qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    padding: 3px;
    margin-bottom: 2px;
  }
  #HeadphoneControls {
    qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    padding: 3px;
  }
  #MasterHeadphoneSeparator {
    /* defines the height of the separator gap */
    padding-top: 2px;
  }
/*
#VuMeterContainerCompact {
  margin: 0px 3px 4px 3px;
  padding: 0px 6px;
}*/
#VuMeterContainerCompactDeck {
  margin: 0px 0px 4px 0px;
  padding: 0px 4px;
}

#VuMeterContainerCompactMaster {
  margin: 0px 2px 4px 2px;
  padding: 0px 5px;
}

/************** Fx *********************************************************/
#FxUnitHeaderCollapsed {
  padding: 0px 2px 0px 4px;
  border-left: 0px;
  border-top-left-radius: 0px;
  border-bottom-left-radius: 0px;
  }
  #FxUnitHeaderExpanded {
    padding: 1px 2px 2px 6px;
    border-bottom-left-radius: 0px;
  }

#FxUnitControlsExpanded, #FxUnitControlsCollapsed {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
  padding: 0px 0px 0px 3px;
}

#SuperMixKnob {
  margin-bottom: 1px;
}

#FxUnitControlsCollapsed #FxUnitLabel {
  alignment: right;
}
#FxUnitControlsExpanded #FxUnitLabel {
  alignment: left;
}

#FxSlotsCollapsed #FxSlotContainer {
  margin: 2px 0px 1px 0px;
  padding-right: 0px;
  padding-left: 0px;
}

#FxUnitControlsCollapsed {
  margin: 2px 2px 2px 0px;
}
#FxUnitControlsExpanded {
  margin-right: 2px;
}
#FxSlotsExpanded {
  margin: 2px 0px 2px 3px;
}
#FxSlotsCollapsed {
  margin: 2px 0px 2px 0px;
}

#FxParametersContainer {
  padding: 2px 1px 1px 1px;
  margin: 2px 1px;
}


/************** Sampler ****************************************************/
#SamplerRow {
  margin: 0px 1px 4px 1px;
  }
  #SamplerTitleRow {
    margin: 0px 1px 0px 0px;
    }
    #SamplerTitle {
      padding: 1px 3px 1px 0px;
    }
  #SamplerPlayBox {
    padding: 0px 2px 1px 0px;
  }
  #SamplerSettings {
    border-width: 1px 1px 0px 0px;
    padding: 0px;
  }
  #SamplerButtons {
    margin-right: 2px;
  }
  #SamplerHotcues {
    padding: 1px 1px 2px 1px;
  }
  #SamplerPfl {
    padding: 0px 2px 2px 6px;
    border-width: 0px 0px 0px 0px;
  }
  #SamplerVU {
    padding: 2px 3px 0px 3px;
    qproperty-layoutAlignment: 'AlignCenter';
    border-width: 1px 1px 0px 0px;
  }


/************** MicAux *****************************************************/

#MicRack, #AuxRack {
  padding: 0px 4px;
  qproperty-layoutSpacing: 4;
}

#MicDuckingContainer {
}

#MicDuckingStrengthBox {
}
/******************************************************************************
************** Scheme-specific layout adjustments ****************************/




/************** font colors **************************************************/

/* yellow */
#Deck1 WLabel, #DeckCompact1 WLabel, #DeckMini1 WLabel,
  #Deck1 WStarRating, #DeckCompact1 WStarRating,
#Deck2 WLabel, #DeckCompact2 WLabel, #DeckMini2 WLabel,
  #Deck2 WStarRating, #DeckCompact2 WStarRating,
#MicAuxLabel,
#SamplerTitle, #SamplerTitleMini, #SamplerBpm,
#PreviewDeckText, #PreviewTitle, #PreviewBPM,
#CategoryLabel, #SkinSettingsLabelButton,
WSearchLineEdit,
#LibraryBPMSpinBox,
#LibraryBPMButton::item,
#LibraryContainer QTableView,
#LibraryContainer QTextBrowser,
#LibraryContainer QTreeView,
WLibrary QLabel, WLibrary QRadioButton,
WLibrary QTableView::indicator,
QToolTip,
WBeatSpinBox QMenu,
#LibraryContainer QMenu,
#LibraryContainer QMenu QCheckBox,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCueMenuPopup QLabel,
#CueLabelEdit,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QCheckBox,
WTrackMenu QMenu,
WTrackMenu QMenu QCheckBox,
#LatencyLabel, WTime {
  color: #f0bb2b;
  }
  WSearchLineEdit,
  #LibraryBPMSpinBox,
  #LibraryBPMButton::item,
  #LibraryContainer QTableView,
  #LibraryContainer QTextBrowser,
  #LibraryContainer QTreeView {
    selection-color: #f0bb2b;
  }

/* light blue */
#Deck3 WLabel, #DeckCompact3 WLabel, #DeckMini3 WLabel,
  #Deck3 WStarRating, #DeckCompact3 WStarRating,
#Deck4 WLabel, #DeckCompact4 WLabel, #DeckMini4 WLabel,
  #Deck4 WStarRating, #DeckCompact4 WStarRating,
#AuxSubTitle {
  color: #0bd9d1;
}

/* green for Fx 1/2 */
#FxUnit1 #FxUnitLabel,
#FxUnit2 #FxUnitLabel {
  color: #73b508;
}

/* blue for Fx 3/4 */
#FxUnit3 #FxUnitLabel,
#FxUnit4 #FxUnitLabel {
  color: #0795b5;
}

/* Grey. default for all deck labels */
#PlayPositionText, #PlayPositionTextSmall,
#DurationText, #RateText,
#KeyText, #KeyTextSmall,
#PreviewLabel,
WEffectSelector, WEffectSelector QAbstractScrollArea,
#fadeModeCombobox, #fadeModeCombobox QAbstractScrollArea,
WBeatSpinBox, #spinBoxTransition,
WLibrary QLabel, WLibrary QRadioButton {
  color: #888;
}

/* Darker grey for knob labels & inactive decks/units */
#KnobLabel,
#FxKnobLabel,
#FxButtonLabel,
#MicAuxLabelUnconfigured {
  color: #666;
}

#VinylButton[displayValue="0"],
#VinylModeButton,
#FxAssignButtons WPushButton[displayValue="0"],
#GuiToggleButton[displayValue="0"],
#BroadcastButton[displayValue="0"],
#SkinSettingsToggle[displayValue="0"],
#RecDuration[highlight="0"],
#RecDuration[highlight="1"],
#RecDuration[highlight="2"] {
  color: #d2d2d1;
  }

#VinylButton[displayValue="1"],
#VinylButton[displayValue="2"],
#VinylCueButton[displayValue="1"],
#VinylCueButton[displayValue="2"],
#FxAssignButtons WPushButton[displayValue="1"],
#GuiToggleButton[displayValue="1"],
#GuiToggleButton[displayValue="2"],
#BroadcastButton[displayValue="1"], /* connecting: yellow */
#SkinSettingsToggle[displayValue="1"] {
  color: #000;
}

#EQKillButton[displayValue="0"] {
  color: #999;
}

#HotcueButton {
  /* ronso0
  TEST pixel fonts instead of icons
  FAIL basically all characters look blurry with a 100% GUI scale factor of 1oo%

  font-size: tried a lot of integers as well as .5 values
  didn't find the magic number.. it's some unintuitive floating point value
  that aligns font pixels to screen pixels so the fonts look sharp.

  font-family: "Acknowledge TT (BRK)";
  font-family: "Bulky Pixels";
  font-family: "Irresistor";
  font-family: "Visitor TT1 BRK";
  font-family: "Boxy Bold";
  font-family: "Pixel Intv";
  font-size: 13px;
  color: #eee;
  */
}

#MixerMasterHeadphone WLabel,
#FxKnobLabel,
#FxButtonLabel {
  padding: 0px;
  background-color: #151515;
  }
  #FxKnobLabel,
  #FxButtonLabel {
    qproperty-alignment: 'AlignLeft | AlignVCenter';
    }

/* Passthrough label on overview waveform */
WOverview #PassthroughLabel {
  font-weight: bold;
  color: #d09300;
}

/************** font colors **************************************************/
/************** font settings *************************************************/



/************** Button styles *************************************************
*************** Button borders ************************************************/
#FxAssignButtons WPushButton[displayValue="0"],
#VinylButton[displayValue="0"], #VinylModeButton, #VinylCueButton[displayValue="0"],
#KeyMatchReset[displayValue="0"],
#GuiToggleButton[displayValue="0"],
#RecFeedback[displayValue="0"],
#BroadcastButton[displayValue="0"],
#SkinSettingsToggle[displayValue="0"],
#DlgMissing > QPushButton,
#DlgHidden > QPushButton,
#DlgAutoDJ > QPushButton,
#DlgRecording > QPushButton,
#DlgAnalysis > QPushButton {
  border-width: 2px;
  border-image: url(skin:/classic/buttons/btn_embedded_library.svg) 2 2 2 2;
  }
  #FxAssignButtons WPushButton[displayValue="1"],
  #VinylButton[displayValue="1"],
  #VinylButton[displayValue="2"],
  #VinylCueButton[displayValue="1"],
  #VinylCueButton[displayValue="2"],
  #KeyMatchReset[pressed="true"],
  #GuiToggleButton[displayValue="1"],
  #RecFeedback[displayValue="1"],
  #RecFeedback[displayValue="2"],
  #BroadcastButton[displayValue="1"],
  #BroadcastButton[displayValue="2"],
  #BroadcastButton[displayValue="3"],
  #SkinSettingsToggle[displayValue="1"],
  QPushButton#pushButtonAutoDJ:checked,
  QPushButton#pushButtonRepeatPlaylist:checked,
  #DlgAnalysis > QPushButton:checked,
  QPushButton#pushButtonRecording:checked {
    border-width: 2px;
    border-image: url(skin:/classic/buttons/btn_embedded_library_active.svg) 2 2 2 2;
  }
  #KeyUp {
    border-width: 1px 2px 0px 2px;
    border-image: url(skin:/classic/buttons/btn_embedded_library.svg) 1 2 12 2;
    }
  #KeyDown {
    border-width: 0px 2px 1px 2px;
    border-image: url(skin:/classic/buttons/btn_embedded_library.svg) 12 2 1 2;
    }

#FxSuperLinkButton,
#FxSuperLinkInvertButton {
  border: 0px solid #0a0a0a;
  border-radius: 3px;
}

/* Library controls in AutoDJ etc. */
#DlgMissing > QPushButton,
#DlgHidden > QPushButton,
#DlgAutoDJ > QPushButton,
#DlgRecording > QPushButton,
#DlgAnalysis > QPushButton {
  color: #bbb;
  }
  #DlgMissing > QPushButton:focus,
  #DlgHidden > QPushButton:focus,
  #DlgAutoDJ > QPushButton:focus,
  #DlgRecording > QPushButton:focus,
  #DlgAnalysis > QPushButton:focus {
    outline: none;
  }
  #DlgMissing > QPushButton:pressed,
  #DlgHidden > QPushButton:pressed,
  #DlgAutoDJ > QPushButton:pressed,
  #DlgRecording > QPushButton:pressed,
  #DlgAnalysis > QPushButton:pressed {
    border-image: url(skin:/classic/buttons/btn_embedded_library_active.svg) 2 2 2 2;
    color: #000;
  }
  #DlgMissing > QPushButton:!enabled,
  #DlgHidden > QPushButton:!enabled,
  #DlgAutoDJ > QPushButton:!enabled,
  #DlgRecording > QPushButton:!enabled,
  #DlgAnalysis > QPushButton:!enabled {
    color: #666;
  }
  QPushButton#pushButtonAutoDJ:checked,
  QPushButton#pushButtonRepeatPlaylist:checked,
  #DlgAnalysis > QPushButton:checked,
  QPushButton#pushButtonRecording:checked {
    color: #000;
  }

WEffectSelector,
WEffectSelector:on {
  border-width: 2px 2px 2px 2px;
  }
  WEffectSelector,
  WEffectSelector:on {
    border-image: url(skin:/palemoon/buttons/btn_embedded_library.svg) 2 2 2 2;
  }
  WEffectSelector:on {
    /* not applied. Only visible on Windows (nad macOS?)
    padding-left: 10px; */
  }
  /* Highlight WEffectSelector when effect is active */
  WEffectSelector[highlight="1"] {  /*
    background-color: #6AAF04;
    color: #000;
    border-image: url(skin:/classic/buttons/btn_embedded_effectselector_active.svg) 2 2 2 2;  */
  }

#fadeModeCombobox,
#fadeModeCombobox:on {
  border-width: 2px 2px 2px 2px;
  }
  #fadeModeCombobox {
    border-image: url(skin:/classic/buttons/btn_embedded_library.svg) 2 2 2 2;
  }
  #fadeModeCombobox:on {
    border-image: url(skin:/classic/buttons/btn_embedded_library_active.svg) 2 2 2 2;
  }

#BeatgridControls WPushButton, #BeatgridControlsToggle,
#DeckRow_5_LoopCuesTransport WPushButton,
#PlayDeck, #PlayIndicator, #PlayBg,
#CueDeck, #PlayCueSmall WPushButton,
#LoopActivate,
#RateControls WPushButton, #SyncDeck,
#MixerContainer WPushButton,
#FxUnitContainer WPushButton,
#SamplerContainer WPushButton,
#MicAuxRack WPushButton {
  /* Limit background-color area to button area designed in SVG backpath. */
  margin: 1px;
  /* just to be sure the colored background doesn't overlap the rounded SVG border */
  border-radius: 2px;
}

WPushButton#FxExpand,
WPushButton#SamplerExpand,
#FxAssignButtons WPushButton,
#VinylControls WPushButton,
#KeyControls WPushButton,
#SamplerSettings WPushButton,
#SamplerSettingsMini WPushButton,
WPushButton#CrossfaderButton,
#LibExpand,
#ToolBar WPushButton {
  margin: 0px;
  border-radius: 0px;
}



/************** button background colors **************************************/
#BeatgridControls WPushButton[displayValue="0"],
#DeckRow_5_LoopCuesTransport WPushButton[displayValue="0"],
#PlayBg, #PlayCueSmall WPushButton[displayValue="0"],
#CueDeck[displayValue="0"], #LoopActivate[displayValue="0"],
#FxAssignButtons WPushButton[displayValue="0"],
#VinylControls WPushButton[displayValue="0"],
#KeyControls WPushButton[displayValue="0"],
  WPushButton#VinylModeButton[displayValue="1"],
  WPushButton#VinylModeButton[displayValue="2"],
WPushButton#MixModeButton[displayValue="1"],
#RateControls WPushButton[displayValue="0"], #SyncDeck[value="0"],
#MixerContainer WPushButton[displayValue="0"],
#FxUnitContainer WPushButton[displayValue="0"],
#SamplerContainer WPushButton[displayValue="0"],
#MicAuxRack WPushButton[displayValue="0"],
/* spinbox buttons */
WBeatSpinBox::up-button,
WBeatSpinBox::down-button,
#spinBoxTransition::up-button,
#spinBoxTransition::down-button,
/* library buttons */
QPushButton#pushButtonAutoDJ:enabled:!checked,
#DlgMissing > QPushButton:enabled,
#DlgHidden > QPushButton:enabled,
#DlgAutoDJ > QPushButton:enabled,
#DlgRecording > QPushButton:enabled,
#DlgAnalysis > QPushButton:enabled,
#GuiToggleButton[displayValue="0"], #RecFeedback[displayValue="0"],
#BroadcastButton[displayValue="0"], #SkinSettingsToggle[displayValue="0"] {
  background-color: #262626;
}

/* Red */
#BeatgridControls WPushButton[value="1"],
#RateControls WPushButton[value="1"],
#SyncDeck[value="1"], #SyncSampler[displayValue="1"],
WPushButton#PlayDeck[displayValue="1"],
WPushButton#PlayDeckMini[displayValue="1"],
#PlaySampler[displayValue="1"], #PlayPreview[displayValue="1"],
WPushButton#PlayIndicator[displayValue="1"],
#CueDeck[displayValue="1"],
WPushButton#Reverse[pressed="true"],
#LoopControls WPushButton[value="1"], #LoopActivate[displayValue="1"],
#BeatjumpControls WPushButton[value="1"],
#EQKillButton[displayValue="1"],
#PflButton[value="1"],
#MicTalk[value="1"], #AuxPlay[value="1"],
#MicDucking[value="1"], #MicDucking[value="2"],
#RecFeedback[displayValue="2"],
QPushButton#pushButtonRecording:checked {
  background-color: #db0000;
}

/* Green for Fx buttons: QuickEffect + Fx 1/2 */
#FxUnit1 #FxToggleButton[displayValue="1"],
#FxUnit2 #FxToggleButton[displayValue="1"],
#QuickEffectButton[displayValue="1"],
#FxAssignButton1[displayValue="1"],
#FxAssignButton2[displayValue="1"],
#BroadcastButton[displayValue="2"] {
  background-color: #659f08;
}
/* Blue for Fx buttons 3/4 */
#FxUnit3 #FxToggleButton[displayValue="1"],
#FxUnit4 #FxToggleButton[displayValue="1"],
#FxAssignButton3[displayValue="1"],
#FxAssignButton4[displayValue="1"] {
  background-color: #0895bc;
}

/* Grey for Pfl, Fx parameters & SplitCue */
#VinylCueButton[displayValue="1"],
#VinylCueButton[displayValue="2"],
#FxParameterButton[displayValue="1"],
#SplitCue[value="1"],
QPushButton#pushButtonRepeatPlaylist:checked {
  background-color: #888;
}

#BroadcastButton[displayValue="3"] {
  /* pink */
  background-color: #f856e7;
}

/* Golden */
#VinylButton[displayValue="1"],
#VinylButton[displayValue="2"],
#GuiToggleButton[displayValue="1"],
#GuiToggleButton[displayValue="2"],
#BroadcastButton[displayValue="1"],   /* connecting: yellow */
#RecFeedback[displayValue="1"],   /* initialize recording */
#SkinSettingsToggle[displayValue="1"],
QPushButton#pushButtonAutoDJ:checked,
#DlgAnalysis > QPushButton:checked {
  background-color: #d09300;
}

#SpecialCueButton[value="1"] {
  background-color: #0044ff;
}

/* Special flat buttons */
WPushButton#PlayDeck[displayValue="0"],
WPushButton#PlayDeckMini[displayValue="0"],
WPushButton#PlayIndicator[value="0"],
WPushButton#BpmTap[displayValue="0"],
WPushButton#FxFocusButton[displayValue="0"],
#SamplerSettings WPushButton[displayValue="0"],
#SamplerSettingsMini WPushButton[displayValue="0"],
WPushButton#FxExpand[displayValue="0"],
WPushButton#SamplerExpand[displayValue="0"],
#BeatgridControlsToggle,
#SamplerControlsMini WPushButton,
#RecDot,
#LibraryPreviewButton {
  background-color: transparent;
}

/************** Button icons **************************************************/

#PlayDeck {
  image: url(skin:/classic/buttons/btn__play_deck.svg) no-repeat center center;
}

#PlayDeckMini[value="0"] {
  image: url(skin:/classic/buttons/btn__play_deck_mini.svg) no-repeat center center;
  }
  #PlayDeckMini[value="1"] {
    image: url(skin:/classic/buttons/btn__pause_deck_mini.svg) no-repeat center center;
  }
#PlaySampler[value="0"],
#PlayPreview[displayValue="0"] {
  image: url(skin:/classic/buttons/btn__play_sampler.svg) no-repeat center center;
  }
  #PlaySampler[value="1"],
  #PlayPreview[displayValue="1"] {
    image: url(skin:/classic/buttons/btn__pause_sampler.svg) no-repeat center center;
  }

#CueDeck {
  image: url(skin:/classic/buttons/btn__cue_deck.svg) no-repeat center center;
}

#Reverse {
  image: url(skin:/classic/buttons/btn__reverse.svg) no-repeat center center;
}

#Hotcue1 WPushButton {
  image: url(skin:/classic/buttons/btn__1.svg) no-repeat center center;
  }
  #Hotcue2 WPushButton {
    image: url(skin:/classic/buttons/btn__2.svg) no-repeat center center;
  }
  #Hotcue3 WPushButton {
    image: url(skin:/classic/buttons/btn__3.svg) no-repeat center center;
  }
  #Hotcue4 WPushButton {
    image: url(skin:/classic/buttons/btn__4.svg) no-repeat center center;
  }
  #Hotcue5 WPushButton {
    image: url(skin:/classic/buttons/btn__5.svg) no-repeat center center;
  }
  #Hotcue6 WPushButton {
    image: url(skin:/classic/buttons/btn__6.svg) no-repeat center center;
  }
  #Hotcue7 WPushButton {
    image: url(skin:/classic/buttons/btn__7.svg) no-repeat center center;
  }
  #Hotcue8 WPushButton {
    image: url(skin:/classic/buttons/btn__8.svg) no-repeat center center;
  }

#SpecialCueButton_intro_start WPushButton {
  image: url(skin:/classic/buttons/btn__intro_start.svg) no-repeat center center;
  }
  #SpecialCueButton_intro_end WPushButton {
    image: url(skin:/classic/buttons/btn__intro_end.svg) no-repeat center center;
  }
  #SpecialCueButton_outro_start WPushButton {
    image: url(skin:/classic/buttons/btn__outro_start.svg) no-repeat center center;
  }
  #SpecialCueButton_outro_end WPushButton {
    image: url(skin:/classic/buttons/btn__outro_end.svg) no-repeat center center;
  }

#LoopActivate {
  image: url(skin:/classic/buttons/btn__loop.svg) no-repeat center center;
}
#Reloop {
  image: url(skin:/classic/buttons/btn__reloop.svg) no-repeat center center;
}

#LoopIn {
  image: url(skin:/classic/buttons/btn__loop_in.svg) no-repeat center center;
}
#LoopOut {
  image: url(skin:/classic/buttons/btn__loop_out.svg) no-repeat center center;
}

#JumpForward {
  image: url(skin:/classic/buttons/btn__jump_right.svg) no-repeat center center;
}
#JumpBack {
  image: url(skin:/classic/buttons/btn__jump_left.svg) no-repeat center center;
}

/* Key buttons */
#KeyMatchReset {
  image: url(skin:/classic/buttons/btn__key_match.svg) no-repeat center center;
}

#KeyUp {
  image: url(skin:/classic/buttons/btn__key_up.svg) no-repeat center center;
}

#KeyDown {
  image: url(skin:/classic/buttons/btn__key_down.svg) no-repeat center center;
}

/* Rate buttons */
#SyncDeck {
  image: url(skin:/classic/buttons/btn__sync_deck.svg) no-repeat center center;
  }

  #SyncSampler {
    image: url(skin:/classic/buttons/btn__sync_sampler.svg) no-repeat center center;
    }

  #RatePermUp {
    image: url(skin:/classic/buttons/btn__plus.svg) no-repeat center center;
  }

  #RatePermDown {
    image: url(skin:/classic/buttons/btn__minus.svg) no-repeat center center;
  }

  #RateTempUp {
    image: url(skin:/classic/buttons/btn__arrow_right_up.svg) no-repeat center center;
  }
  #RateTempDown {
    image: url(skin:/classic/buttons/btn__arrow_left_down.svg) no-repeat center center;
  }

  #RateTempUpRev {
    image: url(skin:/classic/buttons/btn__arrow_right_down.svg) no-repeat center center;
  }

  #RateTempDownRev {
    image: url(skin:/classic/buttons/btn__arrow_left_up.svg) no-repeat center center;
  }

/* Mixer buttons */
#PflButton {
  image: url(skin:/classic/buttons/btn__pfl.svg) no-repeat center center;
}

#QuickEffectButton[displayValue="0"] {
  image: url(skin:/classic/buttons/btn__star.svg) no-repeat center center;
}

#SplitCue {
  image: url(skin:/classic/buttons/btn__split.svg) no-repeat center center;
}

#FxExpand[value="0"],
#LibExpand[value="0"] {
  image: url(skin:/classic/buttons/btn__expand.svg) no-repeat left center;
  }
  #FxExpand[value="1"],
  #LibExpand[value="1"] {
    image: url(skin:/classic/buttons/btn__collapse.svg) no-repeat left center;
  }
#SamplerExpand[value="0"] {
  image: url(skin:/classic/buttons/btn__expand_dim.svg) no-repeat left center;
  }
  #SamplerExpand[value="1"] {
    image: url(skin:/classic/buttons/btn__collapse_dim.svg) no-repeat left center;
  }

#MixModeButton[value="0"] {
  image: url(skin:/classic/buttons/btn__fx_mixmode_d-w.svg) no-repeat center center;
  }
  #MixModeButton[value="1"] {
    image: url(skin:/classic/buttons/btn__fx_mixmode_d+w.svg) no-repeat center center;
  }

#FxToggleButton[value="0"] {
  image: url(skin:/classic/buttons/btn__fx_toggle.svg) no-repeat center center;
  }
  #FxToggleButton[value="1"] {
    image: url(skin:/classic/buttons/btn__fx_toggle_active.svg) no-repeat center center;
  }

#FxFocusButton[value="0"] {
  image: url(skin:/classic/buttons/btn__fx_focus.svg) no-repeat center center;
  }
  #FxFocusButton[value="1"] {
    image: url(skin:/classic/buttons/btn__fx_focus_active.svg) no-repeat center center;
  }

/* deck controls for decks 1-4 and samplers */
#CurposButton12[displayValue="0"], #CurposButton34[displayValue="0"] {
  image: url(skin:/classic/buttons/btn__beat_curpos.svg) no-repeat center center;
  }
  #CurposButton12[value="1"] {
    image: url(skin:/classic/buttons/btn__beat_curpos_active_12.svg) no-repeat center center;
  }
  #CurposButton34[value="1"] {
    image: url(skin:/classic/buttons/btn__beat_curpos_active_34.svg) no-repeat center center;
  }

  #EjectButton12[displayValue="0"], #EjectButton34[displayValue="0"] {
    image: url(skin:/classic/buttons/btn__eject.svg) no-repeat center center;
    }
    #EjectButton12[value="1"] {
      image: url(skin:/classic/buttons/btn__eject_active_12.svg) no-repeat center center;
    }
    #EjectButton34[value="1"] {
      image: url(skin:/classic/buttons/btn__eject_active_34.svg) no-repeat center center;
    }

  #RepeatButton12[displayValue="0"], #RepeatButton34[displayValue="0"] {
    image: url(skin:/classic/buttons/btn__repeat.svg) no-repeat center center;
    }
    #RepeatButton12[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__repeat_active_12.svg) no-repeat center center;
    }
    #RepeatButton34[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__repeat_active_34.svg) no-repeat center center;
    }

  #QuantizeButton12[displayValue="0"], #QuantizeButton34[displayValue="0"] {
    image: url(skin:/classic/buttons/btn__quantize.svg) no-repeat center center;
    }
    #QuantizeButton12[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__quantize_active_12.svg) no-repeat center center;
    }
    #QuantizeButton34[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__quantize_active_34.svg) no-repeat center center;
    }

  #SlipmodeButton12[displayValue="0"], #SlipmodeButton34[displayValue="0"] {
    image: url(skin:/classic/buttons/btn__slip.svg) no-repeat center center;
    }
    #SlipmodeButton12[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__slip_active_12.svg) no-repeat center center;
    }
    #SlipmodeButton34[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__slip_active_34.svg) no-repeat center center;
    }

  #KeylockButton12[displayValue="0"], #KeylockButton34[displayValue="0"] {
    image: url(skin:/classic/buttons/btn__keylock.svg) no-repeat center center;
    }
    #KeylockButton12[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__keylock_active_12.svg) no-repeat center center;
    }
    #KeylockButton34[displayValue="1"] {
      image: url(skin:/classic/buttons/btn__keylock_active_34.svg) no-repeat center center;
    }

#BeatgridControlsToggle[displayValue="0"] {  /*
  border-width: 3px;
  border-image: url(skin:/classic/buttons/btn_embedded_library.svg) 3 3 3 3;  */
  image: url(skin:/classic/buttons/btn__beatgrid_controls_expand.svg) no-repeat center center;
  }
  #BeatgridControlsToggle[displayValue="1"] {
    image: url(skin:/classic/buttons/btn__beatgrid_controls_collapse.svg) no-repeat center center;
  }
  #BeatCurposLarge {
    image: url(skin:/classic/buttons/btn__beat_curpos_large.svg) no-repeat center center;
    }
    #BeatsEarlier {
      image: url(skin:/classic/buttons/btn__beats_earlier.svg) no-repeat center center;
    }
    #BeatsLater {
      image: url(skin:/classic/buttons/btn__beats_later.svg) no-repeat center center;
    }
    #BeatsSlower {
      image: url(skin:/classic/buttons/btn__beats_slower.svg) no-repeat center center;
    }
    #BeatsFaster {
      image: url(skin:/classic/buttons/btn__beats_faster.svg) no-repeat center center;
    }
    #HotcuesEarlier {
      image: url(skin:/classic/buttons/btn__hotcues_earlier.svg) no-repeat center center;
    }
    #HotcuesLater {
      image: url(skin:/classic/buttons/btn__hotcues_later.svg) no-repeat center center;
    }

#MicTalk {
  image: url(skin:/classic/buttons/btn__mic_talk.svg) no-repeat center center;
}

#AuxPlay {
  image: url(skin:/classic/buttons/btn__aux_play.svg) no-repeat center center;
}

#MicAuxAdd {
  image: url(skin:/classic/buttons/btn__plus_flat.svg) no-repeat center center;
}

#MicDucking[value="0"] {
  image: url(skin:/classic/buttons/btn__mic_duck_off.svg) no-repeat center center;
  }
  #MicDucking[value="1"] {
    image: url(skin:/classic/buttons/btn__mic_duck_auto.svg) no-repeat center center;
  }
  #MicDucking[value="2"] {
    image: url(skin:/classic/buttons/btn__mic_duck_manual.svg) no-repeat center center;
  }

#RecDot {
  image: url(skin:/classic/buttons/btn__rec_dot.svg) no-repeat center center;
}

#SkinSettingsToggle[displayValue="0"] {
  /* for some reason the alignment isn't rescpected, so the icons
    have to be sized like available area (76x16px) */
  image: url(skin:/classic/buttons/btn__settings_off.svg) no-repeat left top;
  }
  #SkinSettingsToggle[displayValue="1"] {
    image: url(skin:/classic/buttons/btn__settings_on.svg) no-repeat left top;
  }

#ToolbarLogo {
  image: url(skin:/classic/style/mixxx_logo_small.svg) no-repeat center center;
}
#SeparatorToolbar {
  image: url(skin:/classic/style/toolbar_separator.png) no-repeat center center;
  margin: 0px 3px;
}

WSearchLineEdit QToolButton:!focus {
  image: url(skin:/classic/buttons/btn__lib_clear_search.svg);
  }
  WSearchLineEdit QToolButton:focus {
    image: url(skin:/classic/buttons/btn__lib_clear_search_focus.svg);
  }

/* AutoDJ button icons */
QPushButton#pushButtonAutoDJ:!checked {
  image: url(skin:/classic/buttons/btn__autodj_enable_off.svg) no-repeat center center;
  }
  QPushButton#pushButtonAutoDJ:checked {
    image: url(skin:/classic/buttons/btn__autodj_enable_on.svg) no-repeat center center;
  }

QPushButton#pushButtonFadeNow:!enabled {
  image: url(skin:/classic/buttons/btn__autodj_fade_disabled.svg) no-repeat center center;
  }
  QPushButton#pushButtonFadeNow:enabled {
    image: url(skin:/classic/buttons/btn__autodj_fade.svg) no-repeat center center;
  }

QPushButton#pushButtonSkipNext:!enabled {
  image: url(skin:/classic/buttons/btn__autodj_skip_disabled.svg) no-repeat center center;
  }
  QPushButton#pushButtonSkipNext:enabled {
    image: url(skin:/classic/buttons/btn__autodj_skip.svg) no-repeat center center;
  }

QPushButton#pushButtonShuffle:enabled {
  image: url(skin:/classic/buttons/btn__autodj_shuffle.svg) no-repeat center center;
  }

QPushButton#pushButtonAddRandom:enabled {
  image: url(skin:/classic/buttons/btn__autodj_addrandom.svg) no-repeat center center;
  }

QPushButton#pushButtonRepeatPlaylist:!checked {
  image: url(skin:/classic/buttons/btn__autodj_repeat_playlist_off.svg) no-repeat center center;
  }
  QPushButton#pushButtonRepeatPlaylist:checked {
    image: url(skin:/classic/buttons/btn__autodj_repeat_playlist_on.svg) no-repeat center center;
  }

/* widgets in cue popup menu */
#CueDeleteButton {  /*
  padding: 3px 6px; */
  qproperty-icon: url(skin:/classic/buttons/btn__delete.svg);
  /* color buttons are 42x24 px.
  To get the final size for the Delete button consider border width.
  wide button:
  width: 38px;
  height: 20px;
  tall button, about the same height as cue number + label edit box */
  width: 24px;
  height: 42px;
  border-width: 2px;
  border-image: url(skin:/classic/buttons/btn_embedded_library.svg) 2 2 2 2;
  /* make the icon slightly larger than default 16px */
  qproperty-iconSize: 20px;
  /* has no effect
  padding: 0px; */
}
/*    */
#CueLabelEdit {
  border: 1px solid #f0bb2b;
  border-radius: 0px;
  background-color: #000;
  selection-color: #000;
  selection-background-color: #ccc;
  padding: 2px;
}
/************** Button icons **************************************************/
/************** Button styles *************************************************/


/***************** Loop Controls *****************/
WBeatSpinBox,
#spinBoxTransition,
#LibraryBPMSpinBox  {
  selection-color: #000;
  selection-background-color: #d2d2d2;
  }
  WBeatSpinBox:hover,
  #spinBoxTransition:hover {
    background-color: #0a0a0a;
  }
  WBeatSpinBox:focus,
  #spinBoxTransition:focus {
    background-color: #000;
  }

  WBeatSpinBox#Spinbox_elevated {
    border-width: 2px 19px 2px 2px;
    border-image: url(skin:/classic/buttons/spinbox_elevated_border.svg) 2 19 2 2;
    margin: 1px 0px 0px 1px;
    padding: 0px -17px 2px 1px;
    background-color: #0f0f0f;
    } /*
    WBeatSpinBox#Spinbox_elevated:hover {
      border-image: url(skin:buttons_classic/spinbox_elevated_border_hover.svg) 2 19 2 2;
    } */
    WBeatSpinBox#Spinbox_elevated:focus {
      border-image: url(skin:/classic/buttons/spinbox_elevated_border_focus.svg) 2 19 2 2;
    }

  #spinBoxTransition {
    border-width: 3px 19px 2px 3px;
    border-image: url(skin:/classic/buttons/spinbox_embedded_border.svg) 3 19 2 3;
    width: 24px;
    height: 19px;
    padding: 0px -15px 0px 0px;
    margin: 0px 2px 3px 5px;
    }
    #spinBoxTransition:hover {
      border-image: url(skin:/classic/buttons/spinbox_embedded_border_hover.svg) 3 19 2 3;
    }
    #spinBoxTransition:focus {
      border-image: url(skin:/classic/buttons/spinbox_embedded_border_focus_orange.svg) 3 19 2 3;
    }

  WBeatSpinBox::up-button,
  WBeatSpinBox::down-button,
  #spinBoxTransition::up-button,
  #spinBoxTransition::down-button {
    subcontrol-origin: content;
    position: relative;
    /* as with spinbox: border is added to size.
      define it with same width as hover border, otherwise size jumps */
    width: 17px;
    padding: 0px;
    }
    WBeatSpinBox::up-button,
    #spinBoxTransition::up-button {
      height: 11px;
      subcontrol-position: top right;
      image: url(skin:/classic/buttons/spinbox_up.svg) no-repeat;
      }
      WBeatSpinBox::up-button:pressed,
      #spinBoxTransition::up-button:pressed {
        image: url(skin:/classic/buttons/spinbox_up_pressed.svg) no-repeat;
      }
      WBeatSpinBox::up-button {
        margin: -2px -1px 0px 0px;
        }
      #spinBoxTransition::up-button {
        margin: -2px -3px 0px 0px;
        }
    WBeatSpinBox::down-button,
    #spinBoxTransition::down-button {
      height: 11px;
      subcontrol-position: bottom right;
      image: url(skin:/classic/buttons/spinbox_down.svg) no-repeat;
      }
      WBeatSpinBox::down-button:pressed,
      #spinBoxTransition::down-button:pressed {
        image: url(skin:/classic/buttons/spinbox_down_pressed.svg) no-repeat;
      }
      WBeatSpinBox::down-button {
        margin: 0px -1px -3px 0px;
        }
      #spinBoxTransition::down-button {
        margin: 0px -3px -1px 0px;
        }

/********************** Loop Controls **********************/



/************** SkinSettings **************************************************/
#SkinSettingsContainer {
}

#SkinSettings {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  padding: 3px;
  border-top: 1px solid #585858;
  border-bottom: 1px solid #585858;
  border-left: 1px solid #585858;
  border-top-left-radius: 2px;
  border-bottom-left-radius: 2px;
}

#SkinSettingsCategory {
  padding: 2px 5px 7px 3px;
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  border-width: 0px;
  }
  #CategoryLabel {
    padding: 3px 0px 2px 0px;
  }
  #SkinSettingsLabelButton {
    padding: 0px 0px 0px 3px;
  }
  #SkinSettingsButton,
  #DeckSizeButton,
  #SkinSettingsText { /*
    padding-top: 1px; */
    color: #d2d2d2;
  }
  #DeckSizeButton[value="1"] {
    background-color: #555;
    color: #fff;
  }

  #DeckSizeToggleContainer {
    padding: 0px 0px 0px 0px;
    qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }

  #SamplerLoadSaveBox {
    padding-left: 18px;
  }

#SubmenuCover {
  background-color: rgba(15, 15, 15, 180);
}

/************** SkinSettings **************************************************/



/************** Library *******************************************************/

#LibraryContainer {
  /* make a smooth transition from toolbar at the bottom to
    darker skin background at the top.
    Splitter handles should be translucent for this to work. */
  background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #080808,
    stop:1 #1e1e1e);
}

WLibrary,
#SidebarBox {
  padding: 2px 0px 0px 2px;
  border-bottom: 0px;
  border-left: 0px;
  border-right: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  border-top-left-radius: 0px;
}

#LibraryContainer QTableView,
#LibraryContainer QTextBrowser,
#LibraryContainer QTreeView {
  border-top: 1px solid #0a0a0a;
  border-right: 1px solid qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #333,
    stop:1 #444);
  border-bottom: 1px solid #444;
  border-left: 1px solid #0a0a0a;
  alternate-background-color: #1a1a1a;
  selection-background-color: #5e4507;
}

#LibraryContainer QTableView:focus,
#LibraryContainer QTreeView:focus,
#LibraryContainer QTextBrowser:focus {
  border: 1px solid #d09300;
}

#LibraryContainer QTreeView {
  show-decoration-selected: 0;
}

/* selected items in Tree and Tracks table */
#LibraryContainer QTreeView::item:selected,
#LibraryContainer QTableView::item:selected,
#LibraryBPMButton::item:selected {
/* this doesn't style BPM value in selected row
#LibraryContainer QTableView::item:selected #LibraryBPMSpinBox::item:selected,
#LibraryContainer QTableView::item:selected > #LibraryBPMSpinBox::item:selected */
  color: #fff;
  background-color: #5e4507;
}

/* checkbox in library "Played" column */
#LibraryContainer QTableView::indicator {/*
  This results in 10x10px + 1px border = 12x12px
  Omitting this definitions makes the checkbox grow to
  12x12px + 1px border = 14x14px
  which also miraculously makes the BPM icon grow to 14x14px
  Neither checkbox nor BPM icon size have an effect on the size... */
  width: 10px;
  height: 10px;
  /* border is added to size defined above */
  border: 1px solid transparent;
  margin: 0px;
  padding: 0px;
  }
  #LibraryContainer QTableView::indicator:hover {
    border: 1px solid #888;
  }
  #LibraryContainer QTableView::indicator:checked,
  #LibraryContainer QTableView::indicator:checked:selected {
    image: url(skin:/classic/buttons/btn__lib_checkmark_orange.svg);
    border: 1px solid #ff6600;
    }
    #LibraryContainer QTableView::indicator:checked:hover,
    #LibraryContainer QTableView::indicator:selected:hover {
      border: 1px solid #aaa;
    }
  #LibraryContainer QTableView::indicator:unchecked {
    image: none;
    border: 1px solid rgba(151,151,151,128);
    }
    #LibraryContainer QTableView::indicator:unchecked:hover,
    #LibraryContainer QTableView::indicator:selected {
      border: 1px solid #888;
    }

/* Table cell in edit mode */
WLibrary QLineEdit,
#LibraryBPMSpinBox {
  color: #ddd;
  background-color: #0f0f0f;
  selection-color: #000;
  selection-background-color: #ccc;
  border: 1px solid #5E4507;
}

/* Entire BPM cell */
/* Lock icon at the left */
#LibraryBPMButton::indicator:checked {
  image: url(skin:/classic/buttons/btn__lib_bpm_locked_orange.svg);
  }
#LibraryBPMButton::indicator:unchecked {
  image: url(skin:/classic/buttons/btn__lib_bpm_unlocked_grey.svg);
  }
/* BPM value */
#LibraryBPMButton::item {
  }
#LibraryBPMSpinBox {
  border-left: 0px;
}
/* When activated, the left border of the spinbox shows an
  artefact of the inactive BPM value. */
#LibraryBPMSpinBox::up-button,
#LibraryBPMSpinBox::down-button {
  background-color: #5E4507;
  }
  #LibraryBPMSpinBox::up-button {
    image: url(skin:/classic/buttons/btn__lib_spinbox_up_white.svg) no-repeat;
    }
  #LibraryBPMSpinBox::down-button {
    image: url(skin:/classic/buttons/btn__lib_spinbox_down_white.svg) no-repeat;
    }
/* remove OS focus indicator from BPM cell */
WLibrary QCheckBox,
#LibraryBPMButton::item:selected,
WCueMenuPopup QPushButton:focus {
  outline: none;
}

/* Button in library "Preview" column */
#LibraryPreviewButton {
  margin: 0px;
  padding: 0px;
  border-radius: 2px;
  border: 1px solid transparent;
  }
  #LibraryPreviewButton:!checked {
    image: url(skin:/classic/buttons/btn__lib_preview_play_grey.svg);
    }
    #LibraryPreviewButton:!checked:hover {
      border: 1px solid #5e4507;
      background: #0f0f0f;
    }
  #LibraryPreviewButton:checked {
    image: url(skin:/classic/buttons/btn__lib_preview_pause.svg);
    background-color: #000;
    border: 1px solid #5e4507;
    }
    #LibraryPreviewButton:checked:hover {
      border: 1px solid #888;
    }


/*********** table header styles *********************************/
#LibraryContainer QHeaderView {
  font-size: 13px/15px;
  color: #bbb;
  border-bottom: 1px solid #000;
  }
#LibraryContainer QHeaderView,
#LibraryContainer QHeaderView::section,
#LibraryContainer QHeaderView::up-arrow,
#LibraryContainer QHeaderView::down-arrow {
  background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #222,
    stop:1 #111);
}
  #LibraryContainer QHeaderView::section {
    height: 18px;
    border: 0px;
    border-right: 1px solid #000;
    border-bottom: 1px solid #000;
    padding: 0px 2px;
  }

  #LibraryContainer QHeaderView::up-arrow,
  #LibraryContainer QHeaderView::down-arrow {
    width: 12px;
    padding-left: 3px;
    padding-right: 3px;
    border-right: 1px solid #000;
    /* gradient colors should match those of QHeaderView gradient,
      with a little transparency added to not cut off the header label */
    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
      stop:0 rgba(34,34,34,190),
      stop:1 rgba(17,17,17,190));
    }
    #LibraryContainer QHeaderView::up-arrow {
      image: url(skin:/classic/buttons/btn__lib_sort_up.png);
      }
    #LibraryContainer QHeaderView::down-arrow {
      image: url(skin:/classic/style/btn_lib_sort_down.png);
    }
/*********** table header styles *********************************/



/*********** scrollbars *********************************/
#LibraryContainer QScrollBar,
WEffectSelector QAbstractScrollArea QScrollBar {
  border: 0px solid #585858;
  background: #000;
  border-radius: 2px;
  padding: 1px;
  color: #999999;
  }
  #LibraryContainer QScrollBar:horizontal,
  WEffectSelector QAbstractScrollArea QScrollBar:horizontal {
    min-width: 12px;
    height: 15px;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    background-color: #000;
  }
  #LibraryContainer QScrollBar:vertical,
  WEffectSelector QAbstractScrollArea QScrollBar:vertical {
    min-height: 12px;
    width: 15px;
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
    color: #b3b3b3;
    background-color: #000;
  }
  /* catch scroll bar of focused treeview like this:
  #LibraryContainer QTreeView:focus QScrollBar:vertical {
  }*/
#LibraryContainer QScrollBar::handle:horizontal,
WEffectSelector QAbstractScrollArea QScrollBar::handle:horizontal {
  min-width: 25px;
  border-radius: 2px;
  background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #725309,
    stop:1 #412f05);
}
#LibraryContainer QScrollBar::handle:vertical,
WEffectSelector QAbstractScrollArea QScrollBar::handle:vertical {
  min-height: 25px;
  border-radius: 2px;
  background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #725309,
    stop:1 #412f05);
}

/* "add-page" and "sub-page" are the gutter of the scrollbar */
#LibraryContainer QScrollBar::add-page,
#LibraryContainer QScrollBar::sub-page,
WEffectSelector QAbstractScrollArea QScrollBar::add-page,
WEffectSelector QAbstractScrollArea QScrollBar::sub-page {
  min-width: 15px;
  min-height: 15px;
  background-color: #000;
  border-radius: 2px;
}
/* Turn off buttons */
#LibraryContainer QScrollBar::add-line,
#LibraryContainer QScrollBar::sub-line,
WEffectSelector QAbstractScrollArea QScrollBar::add-line,
WEffectSelector QAbstractScrollArea QScrollBar::sub-line{
  width: 0px;
  height: 0px;
  border: 0px;
}

/* Corner in between two scrollbars */
#LibraryContainer QAbstractScrollArea::corner,
WEffectSelector QAbstractScrollArea QScrollBar::corner {
  background-color: #1e1e1e;
}
/*********** scrollbars *********************************/


/*********** library search bar *********************************/
WSearchLineEdit {
  padding: 2px;
  background-color: #0f0f0f;
  selection-color: #000;
  selection-background-color: #ccc;
  }
  WSearchLineEdit:focus {
    padding: 1px;
    border: 2px solid #d08e00;
  }
  WSearchLineEdit[active="false"],
  WSearchLineEdit:disabled {
    color: #999;
  }
  WSearchLineEdit:disabled {
    background-color: #191919;
  }
  /* Clear button: see /skins/default.qss */

/************ splitters ***********************/
/* HorizontalSplitter
  (the splitter itself is horizontal)
  Used to split
  - Waveforms & Decks/FX/etc
  - Library feature & Coverart */
#HorizontalSplitter {
  padding: 0px;
  margin: 0px;
}

#HorizontalSplitter::handle {
    image: url(skin:/classic/style/splitter_handle_horizontal_unchecked.png); /*
    border-top: 1px solid #000; */
  }
  #HorizontalSplitter::handle:pressed,
  #HorizontalSplitter::handle:hover {
    image: url(skin:/classic/style/splitter_handle_horizontal_checked.png);
  }
#HorizontalSplitter::handle:vertical {
  height: 9px;
}

/* VerticalSplitter
  (the splitter itself is vertical)
  Used to split Library sidebar & Tracks table */
#VerticalSplitter {
  border-top: 1px solid #333333;
}
#VerticalSplitter::handle { /*
  background-image: url(skin:/classic/style/library_splitter_handle_unchecked.svg);
  background-position: center top;
  background-repeat: no-repeat;  */
  image: url(skin:/classic/style/splitter_handle_vertical_unchecked.png);
  background-color: #1e1e1e;
}
#VerticalSplitter::handle:pressed,
#VerticalSplitter::handle:hover {
  image: url(skin:/classic/style/splitter_handle_vertical_checked.png);
}
#VerticalSplitter::handle:vertical {
  /* 'height' works although it's actually the width of the handle */
  height: 6px;
}
/************ splitters ***********************/


/************ Library feature controls / tree view / table view *************/
WLibrary QRadioButton::indicator:checked {
  background: url(skin:/classic/buttons/btn__lib_radio_button_on_yellow.svg) center center;
}

WLibrary QRadioButton::indicator:unchecked {
  background: url(skin:/classic/buttons/btn__lib_radio_button_off.svg) center center;
}

/* triangle for closed/opened branches in treeview */
/* closed */
#LibraryContainer QTreeView::branch:closed:has-children:!has-siblings:!selected,
#LibraryContainer QTreeView::branch:closed:has-children:has-siblings:!selected {
/*  Suppresses that selected sidebar items branch indicator shows wrong color when out of focus ; lp:880588 */
  border-image: none;
    image: url(skin:/classic/style/library_branch_closed_grey.png);
  }
  /* closed, selected */
  #LibraryContainer QTreeView::branch:closed:has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:closed:has-children:has-siblings:selected {
    border-image: none;
    image: url(skin:/classic/style/library_branch_closed_selected_white.png);
    background-color: #5e4507;
  }
/* open */
#LibraryContainer QTreeView::branch:open:has-children:!has-siblings,
#LibraryContainer QTreeView::branch:open:has-children:has-siblings {
  border-image: none;
  image: url(skin:/classic/style/library_branch_open_grey.png);
  }
  /* open, selected */
  #LibraryContainer QTreeView::branch:open:has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:open:has-children:has-siblings:selected {
    border-image: none;
    image: url(skin:/classic/style/library_branch_open_selected_white.png);
    background-color: #5e4507;
    }
  /* space left of selected child item */
  #LibraryContainer QTreeView::branch:closed:!has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:closed:!has-children:has-siblings:selected,
  #LibraryContainer QTreeView::branch:open:!has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:open:!has-children:has-siblings:selected {
    border-image: none;
    background-color: #0f0f0f;
  }
/************** Library *******************************************************/



/************** common styles for WEffectSelector ******************************
*************** QSpinBox, QMenu, QToolTip *************************************/
WEffectSelector QAbstractScrollArea,
#fadeModeCombobox QAbstractScrollArea,
QToolTip,
WBeatSpinBox QMenu,
#LibraryContainer QMenu,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QMenu {
  padding: 3px;
  border: 1px solid #888;
  border-radius: 2px;
}

#SkinContainer {
  background-color: #0f0f0f;
}
#CrossfaderButtonContainerDeck,
#CrossfaderButtonContainerAux,
WPushButton#CrossfaderButton[value="0"],
#LibraryContainer QTableView,
#LibraryContainer QTextBrowser,
#LibraryContainer QTreeView,
QToolTip,
WBeatSpinBox QMenu,
  WCueMenuPopup,
  #LibraryContainer QMenu,
  WCueMenuPopup QMenu,
  WCoverArtMenu,
  WTrackMenu,
  WTrackMenu QMenu,
WBeatSpinBox QMenu::item,
  #LibraryContainer QMenu::item,
  WCueMenuPopup QMenu::item,
  WCueMenuPopup QLabel,
  WCoverArtMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item,
#LibraryContainer QMenu QCheckBox,
WTrackMenu QCheckBox,
WTrackMenu QMenu QCheckBox,
WBeatSpinBox,
#spinBoxTransition,
#SkinSettings,
WSearchLineEdit,
WEffectSelector QAbstractScrollArea,
#fadeModeCombobox QAbstractScrollArea,  /*
WEffectSelector, WEffectSelector::item,
#fadeModeCombobox, #fadeModeCombobox::item */
WEffectSelector::item,
#fadeModeCombobox::item {
  background-color: #0f0f0f;
}
WEffectSelector, #fadeModeCombobox {
  background-color: #161616;
}
WBeatSpinBox,
#spinBoxTransition,
WEffectSelector, WEffectSelector QAbstractScrollArea,
#fadeModeCombobox, #fadeModeCombobox QAbstractScrollArea {
  font-size: 13px/13px;
}
#SkinSettingsButton,
#DeckSizeButton,
#SkinSettingsText {
  font-size: 13px/13px;
}
  /* hovered items */
  WEffectSelector::item:selected,
  #fadeModeCombobox::item:selected,
  WBeatSpinBox QMenu::item:selected,
  #LibraryContainer QMenu::item:selected,
  WCueMenuPopup QMenu::item:selected,
  WCoverArtMenu::item:selected,
  WTrackMenu::item:selected,
  WTrackMenu QMenu::item:selected,
  #LibraryContainer QMenu QCheckBox:selected,
  #LibraryContainer QMenu QCheckBox:focus,  /* selected by keyboard */
  #LibraryContainer QMenu QCheckBox:hover, /* mouse hover */
  WTrackMenu QCheckBox:selected,
  WTrackMenu QCheckBox:focus,
  WTrackMenu QCheckBox:hover,
  WTrackMenu QMenu QCheckBox:selected,
  WTrackMenu QMenu QCheckBox:focus,
  WTrackMenu QMenu QCheckBox:hover,
  #SkinSettingsButton:hover,
  #DeckSizeButton:hover,
  #SkinSettingsLabelButton:hover {
    background-color: #5E4507;
    color: white;
    /* remove OS focus indicator */
    outline: none;
  }
  /* hover over checked effect */
  WEffectSelector::item:checked:selected,
  #fadeModeCombobox::item:checked:selected {
    background-color: #2a1e03;
    color: #fff;
    }


WEffectSelector,
#fadeModeCombobox {
  font-weight: bold;
  /* The 3D frame on the combo box becomes flat when you give it a border
  border-radius: 3px; */
  }
  WEffectSelector {
    /* If you use margin top/bottom 0, the combo box shrinks in width (go figure) and
        names start getting cut off. Adding explicit padding improves this. */
    padding: 0px 0px 2px 5px;
    margin: 0px;
  }
  #fadeModeCombobox {
    height: 19px;
    padding: 0px 0px 1px 5px;
    margin: 0px 1px 2px 1px;
  }
  WEffectSelector::down-arrow,
  #fadeModeCombobox::down-arrow {
    image: url(skin:/classic/buttons/btn__fx_selector_down.svg);
    border: 0;
    padding: 0;
    margin: 0;
    }
    WEffectSelector::down-arrow:hover,
    #fadeModeCombobox::down-arrow:hover {
      image: url(skin:/classic/buttons/btn__fx_selector_down_pressed.svg);
    }

  WEffectSelector QAbstractScrollArea {
    min-width: 160px;
  }
  #fadeModeCombobox QAbstractScrollArea {
    min-width: 185px;
  }
  WEffectSelector::indicator:checked,
  #fadeModeCombobox::indicator:checked {
    /* checkbox container is 28 x 22px;
      use margin + border to create a square checkbox sized like kill buttons */
    margin: 2px;
    image: url(skin:/classic/buttons/btn__lib_checkmark_orange.svg);
  }
  WEffectSelector::checked, /* selected item */
  WEffectSelector::indicator, /* checkbox, tick mark */
  WEffectSelector::drop-down,
  WEffectSelector::indicator:!checked,
  #fadeModeCombobox::checked, /* selected mode */
  #fadeModeCombobox::indicator, /* checkbox, tick mark */
  #fadeModeCombobox::drop-down,
  #fadeModeCombobox::indicator:!checked,
  WBeatSpinBox QMenu::item,
  #LibraryContainer QMenu::item,
  WCueMenuPopup QMenu::item,
  WCoverArtMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item,
  #LibraryContainer QMenu QCheckBox,
  WTrackMenu QCheckBox,
  WTrackMenu QMenu QCheckBox {
      padding: 0px;
      margin: 0px;
      image: none;
      outline: none;
      border: 0px solid transparent;
    }
  WBeatSpinBox QMenu::separator,
  #LibraryContainer QMenu::separator,
  WCueMenuPopup QMenu::separator,
  WTrackMenu::separator,
  WTrackMenu QMenu::separator,
  #SkinSettingsSeparator {
    border-top: 1px solid #000;
    border-bottom: 1px solid #222;
    }
    WBeatSpinBox QMenu::separator,
    #LibraryContainer QMenu::separator,
    WCueMenuPopup QMenu::separator,
    WTrackMenu::separator,
    WTrackMenu QMenu::separator {
        height: 0px;
        margin: 4px;
      }
    #SkinSettingsSeparator {
      margin: 0px 4px 4px 4px;
    }
  WBeatSpinBox QMenu::item,
  #LibraryContainer QMenu::item,
  WCueMenuPopup QMenu::item,
  WCoverArtMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item {
  /* Right padding creates a margin to the menu expand arrow.
    Left padding should be bigger than menu icon width + menu icon
    left/right margin */
    padding: 5px 12px 5px 26px;
  }
  /* Icons in QLineEdit menus:
   beatsize spinbox, searchbox, editable track properties */
  WBeatSpinBox QMenu::icon,
  #LibraryContainer QMenu::icon,
  WCueMenuPopup QMenu::icon,
  WTrackMenu::icon,
  WTrackMenu QMenu::icon,
  /* checkbox in Crate name context menu:
    "[ ] Auto DJ Track Source"  */
  #LibraryContainer QMenu::indicator,
  WTrackMenu::indicator,
  WTrackMenu QMenu::indicator {
    margin: 0px 4px 0px 5px;
    }
  /* items in Crate sub menu */
  #LibraryContainer QMenu QCheckBox,
  WTrackMenu QCheckBox,
  WTrackMenu QMenu QCheckBox {
    padding: 3px 10px 3px 5px;
    }
  #LibraryContainer QMenu QCheckBox::indicator,
  #LibraryContainer QMenu::indicator,
  WCueMenuPopup QMenu::indicator,
  WTrackMenu QCheckBox::indicator,
  WTrackMenu::indicator,
  WTrackMenu QMenu QCheckBox::indicator,
  WTrackMenu QMenu::indicator {
    width: 13px;
    height: 13px;
    border: 1px solid #333;
    border-radius: 1px;
    background-color: #000;
    /* remove OS focus indicator */
    outline: none;
    }
  #LibraryContainer QMenu QCheckBox::indicator:checked,
  #LibraryContainer QMenu::indicator:checked,
  WTrackMenu QCheckBox::indicator:checked,
  WTrackMenu::indicator:checked,
  WTrackMenu QMenu QCheckBox::indicator:checked,
  WTrackMenu QMenu::indicator:checked,
  WCueMenuPopup QMenu::indicator:checked {
    image: url(skin:/classic/buttons/btn__lib_checkmark_orange.svg);
    }
  /* disabled menu item and checkbox */
  #LibraryContainer QMenu QCheckBox:!enabled,
  #LibraryContainer QMenu::item:!enabled,
  WTrackMenu QCheckBox:!enabled,
  WTrackMenu::item:!enabled,
  WTrackMenu QMenu QCheckBox:!enabled,
  WTrackMenu QMenu::item:!enabled,
  WCueMenuPopup QMenu::item:!enabled,
  WCoverArtMenu::item:!enabled,
  #LibraryContainer QMenu QCheckBox::indicator:!enabled,
  WTrackMenu QCheckBox::indicator:!enabled,
  WTrackMenu QMenu QCheckBox::indicator:!enabled {
    color: #494949;
    }
  #LibraryContainer QMenu QCheckBox::indicator:!enabled:!checked,
  #LibraryContainer QMenu::indicator:!enabled:!checked,
  WTrackMenu QCheckBox::indicator:!enabled:!checked,
  WTrackMenu::indicator:!enabled:!checked,
  WTrackMenu QMenu QCheckBox::indicator:!enabled:!checked,
  WTrackMenu QMenu::indicator:!enabled:!checked,
  WCueMenuPopup QMenu::indicator:!enabled:!checked {
    border: 1px solid #222;
    background-color: #222;
    }
  #LibraryContainer QMenu QCheckBox::indicator:!enabled:checked,
  WTrackMenu QCheckBox::indicator:!enabled:checked,
  WTrackMenu QMenu QCheckBox::indicator:!enabled:checked {
    image: url(skin:/classic/buttons/btn__lib_checkmark_grey.svg);
    border: 1px solid #222;
    background-color: #222;
    }
  #LibraryContainer QMenu QCheckBox::indicator:indeterminate,
  #LibraryContainer QCheckBox::indicator:indeterminate:!enabled,
  WTrackMenu QCheckBox::indicator:indeterminate,
  WTrackMenu QMenu QCheckBox::indicator:indeterminate {
    image: url(skin:/classic/buttons/btn__lib_checkmark_grey.svg);
  }

  #LibraryContainer QMenu::right-arrow,
  WTrackMenu::right-arrow,
  WTrackMenu QMenu::right-arrow {
    width: 10px;
    height: 10px;
    image: url(skin:/classic/style/menu_arrow_yellow.svg);
    }
  #LibraryContainer QMenu::right-arrow:selected,
  WTrackMenu::right-arrow:selected,
  WTrackMenu QMenu::right-arrow:selected {
    image: url(skin:/classic/style/menu_arrow_white.svg);
  }

  #LibraryContainer QHeaderView QMenu::indicator {
    width: 10px;
    height: 10px;
    margin-left: 2px;
    border: none;
    background: none;
    }
    #LibraryContainer QHeaderView QMenu::indicator:checked {
      image: url(skin:/classic/buttons/btn__lib_checkmark_orange.svg);
    }
/************** common styles for WEffectSelector ******************************
*************** QSpinBox, QMenu, QToolTip *************************************/
